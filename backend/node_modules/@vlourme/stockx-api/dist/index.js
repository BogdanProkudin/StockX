import axios from "axios";
var StockXLocation;
(function (StockXLocation) {
    StockXLocation["US"] = "us";
    StockXLocation["EU"] = "eu";
})(StockXLocation || (StockXLocation = {}));
/**
 * StockX API wrapper
 */
class StockXAPI {
    /**
     * Create a new StockXAPI instance.
     * @param {StockXLocation} location - The location of the StockX API.
     * @default StockXLocation.US
     */
    constructor(location = StockXLocation.US) {
        /**
         * The location of the StockX API.
         * @default StockXLocation.US
         */
        this.location = StockXLocation.US;
        this.location = location;
    }
    /**
     * Get the base URL of the StockX API.
     * @returns {string} The base URL of the StockX API.
     */
    get baseUrl() {
        switch (this.location) {
            case StockXLocation.US:
                return 'https://api.sneakersapi.dev';
            case StockXLocation.EU:
                return 'https://eu.api.sneakersapi.dev';
        }
    }
    /**
     * Count the number of products on StockX.
     * @param {string} query - The search query.
     * @returns {Promise<number>} The number of products.
     */
    async countProducts() {
        const response = await axios.get(`${this.baseUrl}/stats`);
        return response.data.count;
    }
    /**
     * Check if the StockX API is healthy.
     * @returns {Promise<boolean>} Whether the StockX API is healthy.
     */
    async isHealthy() {
        return await this.countProducts() > 0;
    }
    /**
     * Search for products on StockX.
     * @param {string} query - The search query.
     * @param {number} page - The page number.
     * @returns {Promise<SearchResults>} The search results.
     */
    async searchProducts(query, page = 1) {
        const response = await axios.get(`${this.baseUrl}/search?query=${query}&page=${page}`);
        return response.data;
    }
    /**
     * Get a product by its ID.
     * @param {string} productId - The ID of the product.
     * @returns {Promise<Product>} The product.
     */
    async getProduct(productId) {
        const response = await axios.get(`${this.baseUrl}/product/${productId}`);
        return response.data;
    }
    /**
     * Get the market data for a product.
     * @param {string} productId - The ID of the product.
     * @returns {Promise<MarketData>} The market data.
     */
    async getMarketData(productId) {
        const response = await axios.get(`${this.baseUrl}/product/${productId}/market`);
        return response.data;
    }
    /**
     * Get the market data for a variant of a product.
     * @param {string} productId - The ID of the product.
     * @param {string} variantId - The ID of the variant.
     * @returns {Promise<VariantMarketData>} The market data.
     */
    async getVariantMarketData(productId, variantId) {
        const response = await axios.get(`${this.baseUrl}/product/${productId}/market/${variantId}`);
        return response.data;
    }
}
export { StockXAPI, StockXLocation };
